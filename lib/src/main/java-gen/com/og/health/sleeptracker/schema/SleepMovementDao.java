package com.og.health.sleeptracker.schema;

import java.util.List;
import net.sqlcipher.Cursor;
import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.og.health.sleeptracker.schema.SleepMovement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SLEEP_MOVEMENT".
*/
public class SleepMovementDao extends AbstractDao<SleepMovement, Long> {

    public static final String TABLENAME = "SLEEP_MOVEMENT";

    /**
     * Properties of entity SleepMovement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MovementTime = new Property(1, java.util.Date.class, "movementTime", false, "MOVEMENT_TIME");
        public final static Property MovementX = new Property(2, Float.class, "movementX", false, "MOVEMENT_X");
        public final static Property MovementY = new Property(3, Float.class, "movementY", false, "MOVEMENT_Y");
        public final static Property MovementZ = new Property(4, Float.class, "movementZ", false, "MOVEMENT_Z");
        public final static Property RecordId = new Property(5, long.class, "recordId", false, "RECORD_ID");
    };

    private Query<SleepMovement> record_SleepMovementsQuery;

    public SleepMovementDao(DaoConfig config) {
        super(config);
    }
    
    public SleepMovementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SLEEP_MOVEMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MOVEMENT_TIME\" INTEGER UNIQUE ," + // 1: movementTime
                "\"MOVEMENT_X\" REAL," + // 2: movementX
                "\"MOVEMENT_Y\" REAL," + // 3: movementY
                "\"MOVEMENT_Z\" REAL," + // 4: movementZ
                "\"RECORD_ID\" INTEGER NOT NULL );"); // 5: recordId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SLEEP_MOVEMENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SleepMovement entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date movementTime = entity.getMovementTime();
        if (movementTime != null) {
            stmt.bindLong(2, movementTime.getTime());
        }
 
        Float movementX = entity.getMovementX();
        if (movementX != null) {
            stmt.bindDouble(3, movementX);
        }
 
        Float movementY = entity.getMovementY();
        if (movementY != null) {
            stmt.bindDouble(4, movementY);
        }
 
        Float movementZ = entity.getMovementZ();
        if (movementZ != null) {
            stmt.bindDouble(5, movementZ);
        }
        stmt.bindLong(6, entity.getRecordId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SleepMovement readEntity(Cursor cursor, int offset) {
        SleepMovement entity = new SleepMovement( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // movementTime
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // movementX
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // movementY
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // movementZ
            cursor.getLong(offset + 5) // recordId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SleepMovement entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMovementTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setMovementX(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setMovementY(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setMovementZ(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setRecordId(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SleepMovement entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SleepMovement entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sleepMovements" to-many relationship of Record. */
    public List<SleepMovement> _queryRecord_SleepMovements(long recordId) {
        synchronized (this) {
            if (record_SleepMovementsQuery == null) {
                QueryBuilder<SleepMovement> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RecordId.eq(null));
                record_SleepMovementsQuery = queryBuilder.build();
            }
        }
        Query<SleepMovement> query = record_SleepMovementsQuery.forCurrentThread();
        query.setParameter(0, recordId);
        return query.list();
    }

}
