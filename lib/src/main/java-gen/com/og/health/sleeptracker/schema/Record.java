package com.og.health.sleeptracker.schema;

import java.util.List;
import com.og.health.sleeptracker.schema.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "RECORD".
 */
public class Record {

    private Long id;
    private java.util.Date beginning;
    private java.util.Date ending;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RecordDao myDao;

    private List<SleepMovement> sleepMovements;

    public Record() {
    }

    public Record(Long id) {
        this.id = id;
    }

    public Record(Long id, java.util.Date beginning, java.util.Date ending) {
        this.id = id;
        this.beginning = beginning;
        this.ending = ending;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRecordDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getBeginning() {
        return beginning;
    }

    public void setBeginning(java.util.Date beginning) {
        this.beginning = beginning;
    }

    public java.util.Date getEnding() {
        return ending;
    }

    public void setEnding(java.util.Date ending) {
        this.ending = ending;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SleepMovement> getSleepMovements() {
        if (sleepMovements == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SleepMovementDao targetDao = daoSession.getSleepMovementDao();
            List<SleepMovement> sleepMovementsNew = targetDao._queryRecord_SleepMovements(id);
            synchronized (this) {
                if(sleepMovements == null) {
                    sleepMovements = sleepMovementsNew;
                }
            }
        }
        return sleepMovements;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSleepMovements() {
        sleepMovements = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
